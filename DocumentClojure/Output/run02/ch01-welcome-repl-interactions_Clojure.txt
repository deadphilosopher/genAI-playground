 Sure! It seems you've shared a variety of Clojure code snippets here, ranging from simple expressions to more complex functions and a basic REPL implementation. Let me provide an overview and explanation for each piece:

1. **Function Declaration**: You have multiple examples showing different ways to declare functions in Clojure. The first one is using the `fn` special form (`(fn [x] (- x))`), while the second example uses shorthand syntax with the `#()` reader macro (`#(- %)`). Both do the same thing: create a function that takes one argument and returns its negative value.

2. **Conditionals**: The use of `if`, `true?`, and `when` is demonstrated to show how conditional expressions work in Clojure. An important point to note here is the truthiness of values in Clojure, where `nil` and `false` are falsey, while everything else (including `0` or `"")` is truthy.

3. **Looping Constructs**: The `loop`/`recur` special form provides a basic loop construct in Clojure. Your example shows how to create a countdown function that prints numbers from `x` down to `1`, and then returns the string `:blastoff!`.

4. **Variables and Namespace**: The use of `def` creates a global variable bound to the namespace (`user`). You can retrieve this value using its name or the special `var` function, which returns metadata about the var itself. Also demonstrated is how you can refer to an existing var with the `#'` reader macro.

5. **Function Definition and Usage**: The average function calculates the arithmetic mean of a sequence of numbers. It shows multiple ways to define this function: directly with `defn` or by binding the result of an anonymous function expression (created using `fn`) to a var with `def`.

6. **Code Evaluation**: The use of `eval` demonstrates that Clojure code can be evaluated at runtime. You can pass expressions, data structures, and strings to `eval`, which will evaluate them in the context of the current namespace.

7. **Embedded REPL**: This function provides a very basic command-line REPL implementation. It reads an expression from standard input, evaluates it using `eval`, and prints out the result. The REPL then loops back to read another expression, until it encounters the keyword `:quit`.

8. **Documentation**: Your file ends with suggestions for documenting your code. This is a great practice that can make your code more understandable and maintainable. It's also a good idea to include examples of how to use your functions, as well as any notes on known limitations or issues.